/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v2.0.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IFakeProfileArgs {
    id: number;
    first_name?: string;
    last_name?: string;
    email?: string;
}
export class FakeProfile {
    public id: number;
    public first_name?: string;
    public last_name?: string;
    public email?: string;
    constructor(args: IFakeProfileArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args != null && args.first_name != null) {
            this.first_name = args.first_name;
        }
        if (args != null && args.last_name != null) {
            this.last_name = args.last_name;
        }
        if (args != null && args.email != null) {
            this.email = args.email;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FakeProfile");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.id);
            output.writeFieldEnd();
        }
        if (this.first_name != null) {
            output.writeFieldBegin("first_name", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.first_name);
            output.writeFieldEnd();
        }
        if (this.last_name != null) {
            output.writeFieldBegin("last_name", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.last_name);
            output.writeFieldEnd();
        }
        if (this.email != null) {
            output.writeFieldBegin("email", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.email);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FakeProfile {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.first_name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.last_name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.email = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined) {
            return new FakeProfile(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read FakeProfile from input");
        }
    }
}
export interface IInvalidOperationArgs {
    code: number;
    why: string;
}
export class InvalidOperation {
    public code: number;
    public why: string;
    constructor(args: IInvalidOperationArgs) {
        if (args != null && args.code != null) {
            this.code = args.code;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[code] is unset!");
        }
        if (args != null && args.why != null) {
            this.why = args.why;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[why] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("InvalidOperation");
        if (this.code != null) {
            output.writeFieldBegin("code", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.code);
            output.writeFieldEnd();
        }
        if (this.why != null) {
            output.writeFieldBegin("why", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.why);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): InvalidOperation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.code = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.why = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.code !== undefined && _args.why !== undefined) {
            return new InvalidOperation(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read InvalidOperation from input");
        }
    }
}
export namespace FakeThingy {
    export interface IPingArgsArgs {
    }
    export class PingArgs {
        constructor() {
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("PingArgs");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): PingArgs {
            input.readStructBegin();
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new PingArgs();
        }
    }
    export interface IAddArgsArgs {
        num1: number;
        num2: number;
    }
    export class AddArgs {
        public num1: number;
        public num2: number;
        constructor(args: IAddArgsArgs) {
            if (args != null && args.num1 != null) {
                this.num1 = args.num1;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (args != null && args.num2 != null) {
                this.num2 = args.num2;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("AddArgs");
            if (this.num1 != null) {
                output.writeFieldBegin("num1", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.num1);
                output.writeFieldEnd();
            }
            if (this.num2 != null) {
                output.writeFieldBegin("num2", thrift.Thrift.Type.I32, 2);
                output.writeI32(this.num2);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): AddArgs {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.Thrift.Type.I32) {
                            const value_7: number = input.readI32();
                            _args.num1 = value_7;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 2:
                        if (fieldType === thrift.Thrift.Type.I32) {
                            const value_8: number = input.readI32();
                            _args.num2 = value_8;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.num1 !== undefined && _args.num2 !== undefined) {
                return new AddArgs(_args);
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddArgs from input");
            }
        }
    }
    export interface IDivideArgsArgs {
        num1: number;
        num2: number;
    }
    export class DivideArgs {
        public num1: number;
        public num2: number;
        constructor(args: IDivideArgsArgs) {
            if (args != null && args.num1 != null) {
                this.num1 = args.num1;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[num1] is unset!");
            }
            if (args != null && args.num2 != null) {
                this.num2 = args.num2;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[num2] is unset!");
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("DivideArgs");
            if (this.num1 != null) {
                output.writeFieldBegin("num1", thrift.Thrift.Type.DOUBLE, 1);
                output.writeDouble(this.num1);
                output.writeFieldEnd();
            }
            if (this.num2 != null) {
                output.writeFieldBegin("num2", thrift.Thrift.Type.DOUBLE, 2);
                output.writeDouble(this.num2);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): DivideArgs {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.Thrift.Type.DOUBLE) {
                            const value_9: number = input.readDouble();
                            _args.num1 = value_9;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 2:
                        if (fieldType === thrift.Thrift.Type.DOUBLE) {
                            const value_10: number = input.readDouble();
                            _args.num2 = value_10;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.num1 !== undefined && _args.num2 !== undefined) {
                return new DivideArgs(_args);
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DivideArgs from input");
            }
        }
    }
    export interface IGet_profileArgsArgs {
        id: number;
    }
    export class Get_profileArgs {
        public id: number;
        constructor(args: IGet_profileArgsArgs) {
            if (args != null && args.id != null) {
                this.id = args.id;
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("Get_profileArgs");
            if (this.id != null) {
                output.writeFieldBegin("id", thrift.Thrift.Type.I32, 1);
                output.writeI32(this.id);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): Get_profileArgs {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.Thrift.Type.I32) {
                            const value_11: number = input.readI32();
                            _args.id = value_11;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.id !== undefined) {
                return new Get_profileArgs(_args);
            }
            else {
                throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Get_profileArgs from input");
            }
        }
    }
    export interface IPingResultArgs {
        success?: void;
    }
    export class PingResult {
        public success?: void;
        constructor(args?: IPingResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("PingResult");
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): PingResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.Thrift.Type.VOID) {
                            input.skip(fieldType);
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new PingResult(_args);
        }
    }
    export interface IAddResultArgs {
        success?: number;
    }
    export class AddResult {
        public success?: number;
        constructor(args?: IAddResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("AddResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.I32, 0);
                output.writeI32(this.success);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): AddResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.Thrift.Type.I32) {
                            const value_12: number = input.readI32();
                            _args.success = value_12;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new AddResult(_args);
        }
    }
    export interface IDivideResultArgs {
        success?: number;
        ouch?: InvalidOperation;
    }
    export class DivideResult {
        public success?: number;
        public ouch?: InvalidOperation;
        constructor(args?: IDivideResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
            if (args != null && args.ouch != null) {
                this.ouch = args.ouch;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("DivideResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.DOUBLE, 0);
                output.writeDouble(this.success);
                output.writeFieldEnd();
            }
            if (this.ouch != null) {
                output.writeFieldBegin("ouch", thrift.Thrift.Type.STRUCT, 1);
                this.ouch.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): DivideResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.Thrift.Type.DOUBLE) {
                            const value_13: number = input.readDouble();
                            _args.success = value_13;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 1:
                        if (fieldType === thrift.Thrift.Type.STRUCT) {
                            const value_14: InvalidOperation = InvalidOperation.read(input);
                            _args.ouch = value_14;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new DivideResult(_args);
        }
    }
    export interface IGet_profileResultArgs {
        success?: FakeProfile;
    }
    export class Get_profileResult {
        public success?: FakeProfile;
        constructor(args?: IGet_profileResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("Get_profileResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): Get_profileResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.TField = input.readFieldBegin();
                const fieldType: thrift.Thrift.Type = ret.ftype;
                const fieldId: number = ret.fid;
                if (fieldType === thrift.Thrift.Type.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.Thrift.Type.STRUCT) {
                            const value_15: FakeProfile = FakeProfile.read(input);
                            _args.success = value_15;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new Get_profileResult(_args);
        }
    }
    export class Client {
        public _seqid: number;
        public _reqs: {
            [name: number]: (err: Error | object | undefined, val?: any) => void;
        };
        public output: thrift.TTransport;
        public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
        constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
            this._seqid = 0;
            this._reqs = {};
            this.output = output;
            this.protocol = protocol;
        }
        public incrementSeqId(): number {
            return this._seqid += 1;
        }
        public ping(): Promise<void> {
            const requestId: number = this.incrementSeqId();
            return new Promise<void>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_ping(requestId);
            });
        }
        public add(num1: number, num2: number): Promise<number> {
            const requestId: number = this.incrementSeqId();
            return new Promise<number>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_add(num1, num2, requestId);
            });
        }
        public divide(num1: number, num2: number): Promise<number> {
            const requestId: number = this.incrementSeqId();
            return new Promise<number>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_divide(num1, num2, requestId);
            });
        }
        public get_profile(id: number): Promise<FakeProfile> {
            const requestId: number = this.incrementSeqId();
            return new Promise<FakeProfile>((resolve, reject): void => {
                this._reqs[requestId] = (error, result) => {
                    delete this._reqs[requestId];
                    if (error != null) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                this.send_get_profile(id, requestId);
            });
        }
        public send_ping(requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("ping", thrift.Thrift.MessageType.CALL, requestId);
            const args: PingArgs = new PingArgs();
            args.write(output);
            output.writeMessageEnd();
            this.output.flush();
            return;
        }
        public send_add(num1: number, num2: number, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("add", thrift.Thrift.MessageType.CALL, requestId);
            const args: AddArgs = new AddArgs({ num1, num2 });
            args.write(output);
            output.writeMessageEnd();
            this.output.flush();
            return;
        }
        public send_divide(num1: number, num2: number, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("divide", thrift.Thrift.MessageType.CALL, requestId);
            const args: DivideArgs = new DivideArgs({ num1, num2 });
            args.write(output);
            output.writeMessageEnd();
            this.output.flush();
            return;
        }
        public send_get_profile(id: number, requestId: number): void {
            const output: thrift.TProtocol = new this.protocol(this.output);
            output.writeMessageBegin("get_profile", thrift.Thrift.MessageType.CALL, requestId);
            const args: Get_profileArgs = new Get_profileArgs({ id });
            args.write(output);
            output.writeMessageEnd();
            this.output.flush();
            return;
        }
        public recv_ping(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
            const noop = (): any => null;
            const callback = this._reqs[requestId] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            input.readMessageEnd();
            return callback(undefined);
        }
        public recv_add(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
            const noop = (): any => null;
            const callback = this._reqs[requestId] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: AddResult = AddResult.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "add failed: unknown result"));
            }
        }
        public recv_divide(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
            const noop = (): any => null;
            const callback = this._reqs[requestId] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: DivideResult = DivideResult.read(input);
            input.readMessageEnd();
            if (result.ouch != null) {
                return callback(result.ouch);
            }
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "divide failed: unknown result"));
            }
        }
        public recv_get_profile(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
            const noop = (): any => null;
            const callback = this._reqs[requestId] || noop;
            if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
                const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
                x.read(input);
                input.readMessageEnd();
                return callback(x);
            }
            const result: Get_profileResult = Get_profileResult.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "get_profile failed: unknown result"));
            }
        }
    }
    export interface IHandler {
        ping(): void | Promise<void>;
        add(num1: number, num2: number): number | Promise<number>;
        divide(num1: number, num2: number): number | Promise<number>;
        get_profile(id: number): FakeProfile | Promise<FakeProfile>;
    }
    export class Processor {
        public _handler: IHandler;
        constructor(handler: IHandler) {
            this._handler = handler;
        }
        public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
            const metadata: thrift.TMessage = input.readMessageBegin();
            const fname: string = metadata.fname;
            const requestId: number = metadata.rseqid;
            const methodName: string = "process_" + fname;
            switch (methodName) {
                case "process_ping": {
                    this.process_ping(requestId, input, output);
                    return;
                }
                case "process_add": {
                    this.process_add(requestId, input, output);
                    return;
                }
                case "process_divide": {
                    this.process_divide(requestId, input, output);
                    return;
                }
                case "process_get_profile": {
                    this.process_get_profile(requestId, input, output);
                    return;
                }
                default: {
                    input.skip(thrift.Thrift.Type.STRUCT);
                    input.readMessageEnd();
                    const errMessage = "Unknown function " + fname;
                    const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                    output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                    err.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            }
        }
        public process_ping(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
            new Promise<void>((resolve, reject): void => {
                try {
                    input.readMessageEnd();
                    resolve(this._handler.ping());
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: void): void => {
                const result: PingResult = new PingResult({ success: data });
                output.writeMessageBegin("ping", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }).catch((err: Error): void => {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("ping", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            });
        }
        public process_add(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
            new Promise<number>((resolve, reject): void => {
                try {
                    const args: AddArgs = AddArgs.read(input);
                    input.readMessageEnd();
                    resolve(this._handler.add(args.num1, args.num2));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number): void => {
                const result: AddResult = new AddResult({ success: data });
                output.writeMessageBegin("add", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }).catch((err: Error): void => {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("add", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            });
        }
        public process_divide(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
            new Promise<number>((resolve, reject): void => {
                try {
                    const args: DivideArgs = DivideArgs.read(input);
                    input.readMessageEnd();
                    resolve(this._handler.divide(args.num1, args.num2));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: number): void => {
                const result: DivideResult = new DivideResult({ success: data });
                output.writeMessageBegin("divide", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }).catch((err: Error): void => {
                if (err instanceof InvalidOperation) {
                    const result: DivideResult = new DivideResult({ ouch: err });
                    output.writeMessageBegin("divide", thrift.Thrift.MessageType.REPLY, requestId);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
                else {
                    const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("divide", thrift.Thrift.MessageType.EXCEPTION, requestId);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                    return;
                }
            });
        }
        public process_get_profile(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
            new Promise<FakeProfile>((resolve, reject): void => {
                try {
                    const args: Get_profileArgs = Get_profileArgs.read(input);
                    input.readMessageEnd();
                    resolve(this._handler.get_profile(args.id));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: FakeProfile): void => {
                const result: Get_profileResult = new Get_profileResult({ success: data });
                output.writeMessageBegin("get_profile", thrift.Thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }).catch((err: Error): void => {
                const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                output.writeMessageBegin("get_profile", thrift.Thrift.MessageType.EXCEPTION, requestId);
                result.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            });
        }
    }
}
